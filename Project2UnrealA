# C:\Users\User\Documents\Unreal Projects\MyProject\scripts\auto_env_gen.py
import unreal, random, math

# -------- CONFIG --------
# All in-project Unreal paths (these refer to Content/Auto/... inside your project)
LEVEL_NAME = "/Game/Auto/Levels/Beach_Auto_L"        # new map will be created here
LANDSCAPE_LOCATION = unreal.Vector(0, 0, 0)
LANDSCAPE_SCALE = unreal.Vector(100, 100, 100)
LANDSCAPE_QUADS_X = 255
LANDSCAPE_QUADS_Y = 255
LANDSCAPE_SECTIONS_PER_COMPONENT = 1
LANDSCAPE_QUADS_PER_SECTION = 63

# Expected assets (you can replace or create them in Content/Auto/)
LANDSCAPE_MATERIAL = "/Game/Auto/Materials/M_BeachLandscape"   # e.g., sand+grass blend
FOLIAGE_TYPES = [
    "/Game/Auto/Foliage/FT_Grass",
    "/Game/Auto/Foliage/FT_BeachBush"
]
WATER_PLUGIN_CLASS = unreal.WaterBodyOcean   # requires Water plugin enabled
HEIGHTMAP_TEXTURE = ""                       # optional heightmap
random.seed(42)
# -------------------------

def ensure_level(path):
    """Create or load a level asset"""
    if unreal.EditorAssetLibrary.does_asset_exist(path):
        unreal.EditorLevelLibrary.load_level(path)
    else:
        asset_tools = unreal.AssetToolsHelpers.get_asset_tools()
        pkg_path = "/".join(path.split("/")[:-1])
        name = path.split("/")[-1]
        world_factory = unreal.WorldFactory()
        asset_tools.create_asset(name, pkg_path, unreal.World, world_factory)
        unreal.EditorLevelLibrary.load_level(path)
    return unreal.EditorLevelLibrary.get_editor_world()

def spawn_actor(cls, loc=unreal.Vector(0,0,0), rot=unreal.Rotator(0,0,0)):
    return unreal.EditorLevelLibrary.spawn_actor_from_class(cls, loc, rot)

def add_sky_and_lighting():
    sun = spawn_actor(unreal.DirectionalLight, unreal.Vector(0,0,1000), unreal.Rotator(-15, -35, 0))
    sun.set_editor_property("mobility", unreal.ComponentMobility.MOVABLE)
    sky = spawn_actor(unreal.SkyLight, unreal.Vector(0,0,0))
    sky.set_editor_property("mobility", unreal.ComponentMobility.MOVABLE)
    spawn_actor(unreal.ExponentialHeightFog, unreal.Vector(0,0,0))
    spawn_actor(unreal.SkyAtmosphere, unreal.Vector(0,0,0))
    spawn_actor(unreal.VolumetricCloud, unreal.Vector(0,0,0))

def create_ocean(bounds_extent=500000.0, sea_level=0.0):
    ocean = spawn_actor(WATER_PLUGIN_CLASS, unreal.Vector(0,0,sea_level))
    try:
        ocean.set_editor_property("target_wave_mask_depth", 20000.0)
    except Exception:
        pass
    return ocean

def create_landscape():
    landscape = spawn_actor(unreal.Landscape, LANDSCAPE_LOCATION)
    landscape.set_actor_scale3d(LANDSCAPE_SCALE)

    if LANDSCAPE_MATERIAL and unreal.EditorAssetLibrary.does_asset_exist(LANDSCAPE_MATERIAL):
        mat = unreal.EditorAssetLibrary.load_asset(LANDSCAPE_MATERIAL)
        landscape.landscape_material = mat

    unreal.LandscapeEditorSubsystem().create_landscape(
        landscape_actor=landscape,
        num_quads_x=LANDSCAPE_QUADS_X,
        num_quads_y=LANDSCAPE_QUADS_Y,
        sections_per_component=LANDSCAPE_SECTIONS_PER_COMPONENT,
        quads_per_section=LANDSCAPE_QUADS_PER_SECTION,
        import_height_data=None,
        import_layer_infos=[],
        resize_mode=unreal.LandscapeResizeMode.RESIZE_MODE_RESAMPLE
    )
    return landscape

def add_procedural_foliage(volume_center=unreal.Vector(0,0,0), volume_extents=unreal.Vector(200000,200000,5000)):
    spawner = unreal.ProceduralFoliageSpawner()
    spawner.tile_overlap = 200.0
    spawner.num_unique_tiles = 5
    spawner.random_seed = random.randint(1, 1_000_000)

    for ft_path in FOLIAGE_TYPES:
        if unreal.EditorAssetLibrary.does_asset_exist(ft_path):
            ft = unreal.EditorAssetLibrary.load_asset(ft_path)
            spawner.add_foliage_type(ft)

    volume = spawn_actor(unreal.ProceduralFoliageVolume, volume_center)
    box = volume.get_component_by_class(unreal.BrushComponent)
    if box:
        box.set_box_extent(volume_extents, True)
    volume.set_editor_property("procedural_foliage", spawner)
    spawner.simulate(volume)

def save_level():
    unreal.EditorLevelLibrary.save_current_level()

def main():
    ensure_level(LEVEL_NAME)
    add_sky_and_lighting()
    create_ocean()
    create_landscape()
    add_procedural_foliage()
    save_level()
    print("Beach scene generated.")

if __name__ == "__main__":
    main()


